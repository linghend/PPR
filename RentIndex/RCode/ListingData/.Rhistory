?rep
x1=rep(c(44,48), each=4)
x1
x2=rep(rep(c(3,9),each=2),2)
x2
x3=rep(c(10,30),4)
c3
x3
y=c(69.02 ,71.65 ,66.20 ,68.83 ,73.32 ,75.95 ,70.24 ,72.87 )
result=lm(y~x1+x2+x3)
result
attributes(result)
result.residuals
result$residuals
result$df.residual
summary(result)
?lm
predict(result,c(46,3,10))
XX <- matrix(runif(8),ncol=2)
XX
yy <- runif(4)
model <- lm(yy~XX)
model
y
x=rbind(x1,x2,x3)
x
x=t(rbind(x1,x2,x3))
x
y
result=lm(y~x)
result
summary(result)
48,9,20)
x.pred=c(
44,3,20,
44,6,10,
44,6,20,
44,6,30,
44,9,20,
46,3,10,
46,3,20,
46,3,30,
46,6,10,
46,6,20,
46,6,30,
46,9,10,
46,9,20,
46,9,30,
48,3,20,
48,6,10,
48,6,20,
48,6,30,
48,9,20)
x
x.pred
x.pred=data.frame(x.pred,ncol=3)
x.pred
x.pred=data.frame(matrix(x.pred,ncol=3))
x.pred=c(
44,3,20,
44,6,10,
44,6,20,
44,6,30,
44,9,20,
46,3,10,
46,3,20,
46,3,30,
46,6,10,
46,6,20,
46,6,30,
46,9,10,
46,9,20,
46,9,30,
48,3,20,
48,6,10,
48,6,20,
48,6,30,
48,9,20)
x.pred=data.frame(matrix(x.pred,ncol=3))
x.pred
?matrix
x.pred=c(
44,3,20,
44,6,10,
44,6,20,
44,6,30,
44,9,20,
46,3,10,
46,3,20,
46,3,30,
46,6,10,
46,6,20,
46,6,30,
46,9,10,
46,9,20,
46,9,30,
48,3,20,
48,6,10,
48,6,20,
48,6,30,
48,9,20)
x.pred=data.frame(matrix(x.pred,ncol=3,byrow=TRUE))
x.pred
predict(result,newdata=x.pred)
df<-data.frame(y=y,x)
df
df<-data.frame(y,x)
df
model<-lm(y~., data=df)
model
summary(model)
fitted(model)
predict(model,newdata=x.pred)
names(x.pred)<-c("x1","x2")
x.pred
names(x.pred)<-c("x1","x2","x3")
x.pred
predict(model,newdata=x.pred)
x.predict=predict(model,newdata=x.pred)
t(x.predict)
x=1
pv=334.28
al<-function(i,pv){
al=12*i*(i+1)*pv/(1-1/(1+i)^10)
}
al(1,100)
(al(1,100))
(al(1,1195033))
(al(1,384.96))
(al(1,524.35))
(al(1,82.03))
al<-function(pv){
i=0.06/12
al=12*i*(i+1)*pv/(1-1/(1+i)^10)
}
(al(524.35))
(al(82.03))
(al(1874560))
al<-function(n,pv){
i=0.06/12
al=12*i*(i+1)*pv/(1-1/(1+i)^12)
}
al<-function(n,pv){
i=0.06/12
al=12*i*(i+1)*pv/(1-1/(1+i)^n)
}
(al(12,1875560))
(al(12,60.56))
(al(120,82.03))
(al(12,524.35))
y1=(al(12,524.35))
y1
(al(120,1874560))
(al(120,2509556))
(al(120,1874560))
.Last.value /3575
(al(120,1864487))
(al(120,1874560))*(1+0.005)
(al(120,1874560))
(al(120,1874560))/(1.005)
(al(120,1828737))
(al(120,1861684))
(al(120,1874560))
al<-function(n,pv){
i=0.06/12
al=12*i*pv/(1-1/(1+i)^n)
}
(al(120,1874560))
(al(120,1828737))
(al(120,1864487))
al<-function(n,pv){
i=0.06/12
al=pv*i/(1-1/(1+i)^n)
}
(al(120,1874560))
al<-function(n,pv){
i=1.06^(1/12)-1
al=pv*12*i/(1-1/(1+i)^n)/(1+i)
}
(al(120,1874560))
(al(120,1910310))
3575*44
x=.Last.value
x/12
44*.94
x/12*3
153.176/4
153.176-39.135
.last.value+56.622
.Last.value+56.622
.Last.value-35.750
.Last.value
.Last.value+2*35.750
44*3575
.Last.value/4
157300*.94
157300/(1.06^12)
0.06/1.06/(1-1/1.06^10)*1874560
0.06/1.06/(1-1/1.06^10)*2509556
k2=(1.06)^(1/12)-1
k2
k2/(1+k2)/(1-1/(1+k2)^120)*1874560
al<-function(n,pv){
i=1.06^(1/12)-1
al=pv*12*i/(1-1/(1+i)^n)/(1+i)
}
al(120,1874560)
.Last.value
(1+8+27+64)/(1+4+9+16)
"*"(pi, "^"(10, 2))
?str
class(dist~speed)
cars
str(cars)
lm(dist~speed,data-cars)
dist
speed
cars
lm(dist ~ speed, data=cars)
cars@speed
cars$speed
quantile(cars$speed)
cars$qspeed <- cut(cars$speed, breaks = quantile(cars$speed),include.lowest = TRUE)
cars$qspeed)
cars$qspeed
is.factor(cars$qspeed)
plot( dist ~ speed, data = cars)
plot( dist ~ qspeed, data = cars)
library(sp)
install.packages(sp)
install.packages("sp")
library(sp)
getClass("Spatial")
CRS
getClass("CRS")
m <- matrix(c(0, 0, 1, 1), ncol = 2, dimnames = list(NULL,c("min", "max")))
m
crs <- CRS(projargs = as.character(NA))
crs
(S <- Spatial(bbox = m, proj4string = crs))
getClass("SpatialPoints")
llCRS <- CRS("+proj=longlat +ellps=WGS84")
llCRS
CRAN_sp <- SpatialPoints(CRAN_mat, proj4string = llCRS)
library(maps)
install.packages("map")
install.packages("maps")
library(maptools)
install.packages("maptools")
library(sp)
data(meuse)
coordinates(meuse)<-c("x","y")
plot(meuse)
cc<-coordinates(meuse)
m.sl<-SpatialLines(list(Lines(list(Line(cc)))))
m.sl <- SpatialLines(list(Lines(list(Line(cc)))))
cc
m.sl <- SpatialLines(list(Lines(list(Line(cc)))))
.1*(.07-0.11)+.9*(.1-.09)
700*5/12
700*15/12
1300*12/800
1150*12/910
1300*12/900
5/12
.Last.value*900
.Last.value*1000
150*1500
help rcom
x=.382
(x^2)
15/27
13/17
437/20126
9/14
24/42
515/20320
788/6979
672/3948
647/2505
191/525
63/162
30/40
13/17
468/17728
911/12107
311/8752
14/1433
911/12103
310/8742
911/14024
310/10289
14/1811
853/13672
275/9650
11/1677
14525+9925+1688
59520/67484
671/(3247-671)
653/1310
226/1310
98/1310
?read.excel
?read.csv
?install.packages
.Call("hello",a,b)
?'.Call'
.Call("hello",1,2)
install.packages('inline')
install.packages('Rcpp')
source('~/.active-rstudio-document')
version
?mean
mean(2, -100, -4, 3, -230, 5)
mean(-100, -4, 3, -230, 5)
mean(c(2, -100, -4, 3, -230, 5))
?ncol
?'%*%'
the.seq <- 1:4
which(outer(outer(the.seq, the.seq, '+'), the.seq, '+') == 6,
arr.ind=TRUE)
?outer
outer(the.seq, the.seq, '+')
install.packages('sampleSelection')
library(sampleSelection)
library(car)
?vif
install.packages("HSAUR")
library(HSAUR)
ls()
?vignette
library()
help.start()
?vignette
vignette()
vignette("Ch_intoduction_to_R", package = "HSAUR")
vignette(, package = "HSAUR")
vignette("Ch_introduction_to_R", package = "HSAUR")
edit(vignette("Ch_introduction_to_R", package = "HSAUR"))
data("Forbes2000", package="HSAUR")
ls()
Forbes2000
?str
str(1:12)
str(ls)
str(args)
str(freeny)
str(Forbes2000)
help(Forbes2000)
str(Forbes2000)
class(Forbes2000
)
dim(Forbes2000)
nrow(Forbes2000)
ncol(Forbes2000)
names(Forbes2000)
class(Forbes2000[,"rank"])
class(Forbes2000["rank"])
class(Forbes2000[,"rank"])
Forbes2000["rank"]
length(Forbes2000[,"rank"])
seq(from = 1, to = 3, by = 1)
class(Forbes2000[, "name"])
Forbes2000[, "name"]
Forbes2000[, "name"][1]
class(Forbes2000[,"category"])
Forbes2000[,"category"]
levels(Forbes2000[,"category"])
nlevels(Forbes2000[,"category"])
table(Forbes2000[,"category"])
?table
rpois(100,5)
table(rpois(100,5))
3+2+9+9+17+19+15+11+7+8
?rpois
?table
a <- letters[1:3]
a
table(a, sample(a))
b <- factor(rep(c("A","B","C"), 10))
b
table(b)
table(b,exclude="B")
d <- factor(rep(c("A","B","C"), 10), levels=c("A","B","C","D","E"))
d
table(d, exclude="B")
median(Forbes2000[,"sales"])
mean(Forbes2000[,"sales"])
range(Forbes2000[,"sales"])
summary(Forbes2000[,"sales"])
classes <- c("character", "integer", "character","factor", "factor", "numeric", "numeric", "numeric","numeric")
length(classes)
class(classes)
companies <- Forbes2000[,"name"]
companies
companies<-Forbes2000$name
companies
order_sales<-order(Forbes2000$sales)
order_sales
?order
order_sales[1:3]
Forbes2000$assets>1000
Forbes2000[Forbes2000$assets>1000]
Forbes2000[Forbes2000$assets>1000,]
Forbes2000[Forbes2000$assets>1000,Forbes2000$assets]
Forbes2000[Forbes2000$assets>1000,"assets"]
table(Forbes2000$assets>1000)
na_profilts<-is.na(Forbes2000$profits)
na_profits
na_profilts
table(na_profits)
table(na_profilts)
Forbes2000[na_profilts,"name"]
Forbes2000[na_profilts,c("name","sales")]
class(Forbes2000[na_profilts,c("name","sales")])
class(Forbes2000[na_profilts,"name"])
complete.cases(Forbes2000)
table(complete.cases(Forbes2000))
UKcomp<-subset(Forbes2000,country=="United Kingdom")
UKcomp
help.start()
library(spdep)
packages()
load("C:/SamHe/PPR/RentIndex/RCode/ListingData/.RData")
18.31-17.58
.73/17.58
load("C:/SamHe/R/TestSP/.RData")
install.packages("BARD")
library(ade4)
install.packages("ade4")
library(spdep)
library(rgdal)
NY8 <- readOGR(".", "NY8_utm18")
NY8 <- readOGR(".", "NY8_utm18")
getwd()
load("C:/SamHe/git/PPR/RentIndex/RCode/ListingData/.RData")
setwd("C:\\SamHe\\PPR\\RentIndex\\RCode\\ListingData")
getwd()
rm(list=ls())
setwd("C:\\SamHe\\PPR\\RentIndex\\RCode\\ListingData")
rm(list=ls())
setwd("C:\\SamHe\\PPR\\RentIndex\\RCode\\ListingData")
setwd("C:\\SamHe\\PPR\\RentIndex\\RCode\\ListingData")
getwd()
setwd("C:\\SamHe\\git\\PPR\\RentIndex\\RCode\\ListingData")
rm(list=ls())
load("C:/SamHe/git/PPR/RentIndex/RCode/ListingData/.RData")
getwd()
RData
dim(RData)
resultLT5
summary(resultLT5
)
RDataxy=coordinates(cbind(RData$Longitude,RData$Latitude))
RDataxy
class(RDataxy)
?dnearneigh
library(spdep)
?dnearneigh
RDatanb <- dnearneigh(RDataxy, 0,1,longlat = TRUE)
class(RDatanb)
plot(RDatanb,RDataxy)
plot(RDatanb)
RDatalw=nb2listw(RDatanb, style="W",zero.policy=TRUE)
class(RDatalw)
moran_RData(log(RData$AskingRate),listw=RDatalw)
moran_RData<-moran.test(log(RData$AskingRate),listw=RDatalw)
moran_RData<-moran.test(log(RData$AskingRate),listw=RDatalw,zero.policy=TRUE)
moran_RData<-moran.test(log(RData$AskingRate),listw=RDatalw,zero.policy=TRUE,randomisation=TRUE,alternative="two.sided")
RDatalw
RDatalw[[1]]
class(RDatalw)
RDatalw$listw
moran_RData<-moran.test(log(RData$AskingRate),listw=RDatalw,zero.policy=TRUE,randomisation=TRUE,alternative="two.sided")
moran_RData
plot(table(RData$AskingRate))
plot(table(log(RData$AskingRate)))
formulaLT5
formula5
formuLT5
moran_RDatalm<-lm.morantest(formuLT5,listw=RDatalw,zero.policy=TRUE,randomisation=TRUE,alternative="two.sided")
?moran.test
moran_RData<-moran.test(log(RData$AskingRate),listw=RDatalw,zero.policy=TRUE,randomisation=FALSE,alternative="two.sided")
moran_RData
?lm.morantest
moran_RDatalm<-lm.morantest(formuLT5,listw=RDatalw,zero.policy=TRUE,alternative="two.sided")
formuLT5
class(formuLT5)
moran_RDatalm<-lm.morantest(resultLT5,listw=RDatalw,zero.policy=TRUE,alternative="two.sided")
moran_RDatalm
RDatalw_W=nb2listw(RDatanb, style="W",zero.policy=TRUE)
RDatalw_B=nb2listw(RDatanb, style="B",zero.policy=TRUE)
RDatalw_C=nb2listw(RDatanb, style="C",zero.policy=TRUE)
RDatalw_S=nb2listw(RDatanb, style="S",zero.policy=TRUE)
moran_RDatalm_W<-lm.morantest(resultLT5,listw=RDatalw_W,zero.policy=TRUE,alternative="two.sided")
moran_RDatalm_W
moran_RDatalm_B<-lm.morantest(resultLT5,listw=RDatalw_B,zero.policy=TRUE,alternative="two.sided")
moran_RDatalm_B
oran_RDatalm_C<-lm.morantest(resultLT5,listw=RDatalw_C,zero.policy=TRUE,alternative="two.sided")
moran_RDatalm_C<-lm.morantest(resultLT5,listw=RDatalw_C,zero.policy=TRUE,alternative="two.sided")
moran_RDatalm_C
moran_RDatalm_S<-lm.morantest(resultLT5,listw=RDatalw_S,zero.policy=TRUE,alternative="two.sided")
moran_RDatalm_S
RDatanbd <- nbdists(RDatanb, coords,longlat=T)
RDatalw_inv<-lapply(RDatanbd,function(x) (1/(x+1)))
moran_RDatalm_inv<-lm.morantest(resultLT5,listw=RDatalw_inv,zero.policy=TRUE,alternative="two.sided")
RData_inv<-lapply(RDatanbd,function(x) (1/(x+1)))
RDatalw_W_inv<-nb2listw(RDatanb, style="W",zero.policy=TRUE,glist=RDatainverse)
RDatalw_W_inv<-nb2listw(RDatanb, style="W",zero.policy=TRUE,glist=RData_inv)
moran_RDatalm_inv<-lm.morantest(resultLT5,listw=RDatalw_W_inv,zero.policy=TRUE,alternative="two.sided")
moran_RDatalm_inv
save.image("C:/SamHe/git/PPR/RentIndex/RCode/ListingData/.RData")
